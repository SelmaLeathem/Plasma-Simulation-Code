/* User input file */
/*This is a work in progress. Eventually there will be an input mechanism
  in place that hides the underlying code from the user, and is more
  intuitive. In the meantime objects need to be explicitly set here. */

//set ion species parameters for case of only one species
ions[0].set_vt(VTI);
ions[0].set_q_over_m(Q_OVER_MI);
ions[0].set_mass(ION_MASS);
ions[0].set_dxp(DXPI);
ions[0].set_init_no(INIT_PARTICLE_NOI);
ions[0].set_dt(DTI);
ions[0].set_qc(QCI);
ions[0].set_no_inject(NO_INJECT);

//particle velocity group information for three groups
ions[0].set_no_groups(NO_GROUPS);
ions[0].set_size_to_check(SIZE_TO_CHECK);
ions[0].set_v_limit(VI1,0);
ions[0].set_group_limit(UPPER_GROUP_LIMIT,0);
ions[0].set_new_group_size(NEW_GROUP_SIZE,0);

ions[0].set_v_limit(VI2,1);
ions[0].set_group_limit(UPPER_GROUP_LIMIT2,1);
ions[0].set_new_group_size(NEW_GROUP_SIZE2,1);

ions[0].set_v_limit(UPPER_V_LIMIT_I,2);
ions[0].set_group_limit(UPPER_GROUP_LIMIT2,2);
ions[0].set_new_group_size(NEW_GROUP_SIZE2,2);

//second ion species
ions[1].set_vt(VTI2);
ions[1].set_q_over_m(Q_OVER_MI2);
ions[1].set_mass(ION_MASS2);
ions[1].set_dxp(DXPI2);
ions[1].set_init_no(INIT_PARTICLE_NOI2);
ions[1].set_dt(DTI);
ions[1].set_qc(QCI2);
ions[1].set_no_inject(NO_INJECT);

ions[1].set_no_groups(NO_GROUPS);
ions[1].set_size_to_check(SIZE_TO_CHECK);
ions[1].set_v_limit(VI12,0);
ions[1].set_group_limit(UPPER_GROUP_LIMIT,0);
ions[1].set_new_group_size(NEW_GROUP_SIZE,0);

ions[1].set_v_limit(VI22,1);
ions[1].set_group_limit(UPPER_GROUP_LIMIT2,1);
ions[1].set_new_group_size(NEW_GROUP_SIZE2,1);

ions[1].set_v_limit(UPPER_V_LIMIT_I2,2);
ions[1].set_group_limit(UPPER_GROUP_LIMIT2,2);
ions[1].set_new_group_size(NEW_GROUP_SIZE2,2);

//optional set electron particle parameters or initialize at runtime
electrons.set_init_no(INIT_PARTICLE_NOE);
electrons.set_dt(DT);
electrons.set_vt(VTE);
electrons.set_q_over_m(Q_OVER_ME);
electrons.set_qc(QCE);
electrons.set_mass(ELECTRON_MASS);
electrons.set_dxp(DXPE);
//no inject has to be set here
electrons.set_no_inject(NO_INJECT);
electrons.set_no_groups(NO_GROUPS);
//set for three groups
electrons.set_v_limit(VE1,0);
electrons.set_group_limit(UPPER_GROUP_LIMIT,0);
electrons.set_new_group_size(NEW_GROUP_SIZE,0);
electrons.set_size_to_check(SIZE_TO_CHECK_E);

electrons.set_v_limit(VE2,1);
electrons.set_group_limit(UPPER_GROUP_LIMIT,1);
electrons.set_new_group_size(NEW_GROUP_SIZE,1);

electrons.set_v_limit(UPPER_V_LIMIT,2);
electrons.set_group_limit(UPPER_GROUP_LIMIT,2);
electrons.set_new_group_size(NEW_GROUP_SIZE,2);

//Used to name data dump at end of simulation. The data dump is 
electrons.set_type(ELECTRON_TYPE);
ions[0].set_type(ION_TYPE);
//second ion species:
ions[1].set_type(ION_TYPE2);

//set electron and ion collision parameters
//there is a separate electron collision object for each ion species
ion_collision[0].set_neutral_density(NEUTRAL_DENSITY);
ion_collision[0].set_vtn(VTN);
ion_collision[0].set_ion_mass(ION_MASS);
//second ion species
ion_collision[1].set_neutral_density(NEUTRAL_DENSITY2);
ion_collision[1].set_vtn(VTN2);
ion_collision[1].set_ion_mass(ION_MASS2);

//first atom species
e_collision[0].set_neutral_density(NEUTRAL_DENSITY);
e_collision[0].set_vtn(VTN);
e_collision[0].set_ion_mass(ION_MASS);
e_collision[0].set_ionization_threshold(THRESHOLD);

//second species  
e_collision[1].set_neutral_density(NEUTRAL_DENSITY2);
e_collision[1].set_vtn(VTN2);
e_collision[1].set_ion_mass(ION_MASS2);
e_collision[1].set_ionization_threshold(THRESHOLD2);

//define the collision cross sections to be used. Note: can pass user defined
//functions

/* ion collisions:
   predefined options currently include:
     sigma_Ar_cx();
     sigma_H_cx();
     sigma_Ar_elastic();
     sigma_H_elastic();
     For a constant value or no collisions need to set constant_elastic or
     constant_cx = value or zero then pass the sigma_const_elastic()
     or sigma_const_cx() method to the function pointer.

    Energy dependent cross-section example:
    ion_collision[0].set_crossSec_elastic(&ion_collisions::sigma_Ar_elastic);
*/

//set calculate center of mass energy to true if the any of the ion
//collision cross-sections need it.
//ion_collision[0].set_CMtrue_elastic(false);
//ion_collision[0].set_CMtrue_CX(false);

//set ion elastic cross section to zero
ion_collision[0].set_constant_elastic(0.0);   
ion_collision[0].set_crossSec_elastic(&ion_collisions::sigma_const_elastic);

//energy dependent charge-exchange cross section:
ion_collision[0].set_crossSec_CX(&ion_collisions::sigma_Ar_cx);

//second ion species
ion_collision[1].set_constant_elastic(0.0);   
ion_collision[1].set_crossSec_elastic(&ion_collisions::sigma_const_elastic);
ion_collision[1].set_crossSec_CX(&ion_collisions::sigma_H_cx);

//if wanted to use elastic energy dependent H cross-section would need to
//set calc center-of-mass energy to true first.
//ion_collision[1].set_CMtrue_elastic(true);
//ion_collision[1].set_crossSec_elastic(&ion_collisions::sigma_H_elastic);

/* electron collisions
    predefined options currently include:
    sigma_Ar_elastic()
    sigma_Ar_ionize()
    sigma_H_elastic()
    sigma_H_ionize()
    sigma_const_elastic()
    sigma_const_ionization()
    user defined functions
     For a constant value or no collisions need to set constant_elastic or
     constant_ionization = value or zero then pass the sigma_const_elastic()
     or sigma_const_ionization() method to the function pointer.

*/

e_collision[0].set_crossSec_elastic(&e_collisions::sigma_Ar_elastic);
e_collision[1].set_crossSec_elastic(&e_collisions::sigma_H_elastic);

//if for example want no ionization  
//e_collision[0].set_constant_ionization(0.0);
//e_collision[0].set_crossSec_ionization(&e_collisions::sigma_const_ionization);

//set electron ionization cross-sections for each species
e_collision[0].set_crossSec_ionization(&e_collisions::sigma_Ar_ionize);
e_collision[1].set_crossSec_ionization(&e_collisions::sigma_H_ionize);

//Set the implement_x_boundary function pointers:
/*
 *  There are currently two options:
 *  1)e_boundary and ion_boundary
 *         This includes reflection, backscattering, absorption, secondary
 *          -electrons.
 *  2)steady_e_boundary and steady_i_boundary
 *         Implements a rapid steady-state by inserting an electron-ion pair
 *         into the simulation domain everytime an electron arrives at the
 *         surface. Ionization should be turned off, and it is recommended 
 *         that the ion and electron time-step are the same. The particle
 *         number remains constant throughtout the simulation so it is 
 *         better to make INIT_PARTICLE_NO large.
 */  

//Need to set ion proportion in percent if select steady-state boundary. This
//value dictates what proportion of the electrons pair up ions of that species.
//For example if there are equall measures of species A and B then use
//ion[0].set_ion_proportion(50.0) and ion[1].set_ion_proportion(50.0)
//Example for one species:
//sec_e.set_ion_proportion(100.0);
//sec_ions[0].set_ion_proportion(100.0);  
//sec_e.set_implement_e_boundary(&boundary::steady_e_boundary);
//sec_ions[0].set_implement_i_boundary(&boundary::steady_i_boundary);

//use e_boundary and ion_boundary
sec_e.set_implement_e_boundary(&boundary::e_boundary);
sec_ions[0].set_implement_i_boundary(&boundary::ion_boundary);
sec_ions[1].set_implement_i_boundary(&boundary::ion_boundary);

//Note: the following parameters do not need to be set if use steady boundary.

//This will change but currently only one electron boundary.              
//set parameters for electron induced secondary emmision, electron reflection
//and backscattering 
//secondary emmision threshold in Vaughan secondary emmision model
sec_e.set_E0(4.32);
//max yield cooresponding to max incoming energy Emax0
sec_e.set_max_yield(1.4);
sec_e.set_Emax0(650.0);
sec_e.set_incident_mass(ELECTRON_MASS);
//Ionization threshold of ion species
sec_e.set_threshold(THRESHOLD);
//Work function of surface
sec_e.set_work_function(WORK_FUNCTION);
sec_e.set_vt(VTE);

//set parameters for ion induced secondary electron emmission

sec_ions[0].set_max_yield(1.4);
sec_ions[0].set_E0(4.32);
sec_ions[0].set_Emax0(650.0);
sec_ions[0].set_incident_mass(ION_MASS);
sec_ions[0].set_threshold(THRESHOLD);
sec_ions[0].set_work_function(WORK_FUNCTION);
sec_ions[0].set_vt(VTI);

//Currently do not have yields designed for H ion impact, however, these can
//be user defined. 
sec_ions[1].set_max_yield(1.4);
sec_ions[1].set_E0(4.32);
sec_ions[1].set_Emax0(650.0);
sec_ions[1].set_incident_mass(ION_MASS2);
sec_ions[1].set_threshold(THRESHOLD2);
sec_ions[1].set_work_function(WORK_FUNCTION);
sec_ions[1].set_vt(VTI2);

//set function pointers to calculate yields
/* current options include:

     e_impact_see_yield_v();
     i_impact_see_yield_Ar();
     calc_reflection_yield_v();
     calc_backscatter_yield_v();
     user defined functions for all four yield types
*/

sec_e.set_e_impact_yield(&boundary::e_impact_see_yield_v);
sec_e.set_reflection_yield(&boundary::calc_reflection_yield_v);
sec_e.set_backscatter_yield(&boundary::calc_backscatter_yield_v);

//Currently do not have yields designed for H ion impact, however, these can
//be user defined. 
sec_ions[0].set_i_impact_yield(&boundary::i_impact_see_yield_Ar);
sec_ions[1].set_i_impact_yield(&boundary::i_impact_see_yield_Ar);

//graph parameters
graphs_ions[0].set_type_in(ION_TYPE);
graphs_ions[0].set_vt(VTI); //normalizes ion distribtion
//normalizes charge density
graphs_ions[0].set_qc(CHARGE); //Plotting particle number density

graphs_ions[1].set_type_in(ION_TYPE2);
graphs_ions[1].set_vt(VTI);  //set same as first species to compare
graphs_ions[1].set_qc(CHARGE);

graphs_electrons.set_type_in(ELECTRON_TYPE);
graphs_electrons.set_vt(VTE);
graphs_electrons.set_qc(ELECTRON_CHARGE); //Plotting particle number density.

//default values are fine for fields
#define n_ntype graphs_fields.set_type_in(NO_TYPE);

//parameters for particle velocity distribution plots
graphs_electrons.set_spread(SPREAD);
graphs_electrons.set_dist_location(DIST_LOCATION);
graphs_electrons.set_dist_location2(DIST_LOCATION2);

graphs_ions[0].set_spread(SPREAD);
graphs_ions[0].set_dist_location(DIST_LOCATION);
graphs_ions[0].set_dist_location2(DIST_LOCATION2);

//second ion species
graphs_ions[1].set_spread(SPREAD);
graphs_ions[1].set_dist_location(DIST_LOCATION);
graphs_ions[1].set_dist_location2(DIST_LOCATION2);


